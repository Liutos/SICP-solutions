(define (same-parity? n m)
  (= (remainder n 2)
     (remainder m 2)))

(define (same-parity . nums)
  (let ((head (car nums))
	(tail (cdr nums)))
    (define (helper lst)
      (if (null? lst)
	  (list)
	  (if (same-parity? head (car lst))
	      (cons (car lst) (helper (cdr lst)))
	      (helper (cdr lst)))))
    (cons head (helper tail))))